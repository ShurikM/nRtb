# Generated by the gRPC Python protocol compiler plugin. DO NOT EDIT!
"""Client and server classes corresponding to protobuf-defined services."""
import grpc
import warnings

from . import events_pb2 as events__pb2


GRPC_GENERATED_VERSION = '1.73.1'
GRPC_VERSION = grpc.__version__
_version_not_supported = False

try:
    from grpc._utilities import first_version_is_lower
    _version_not_supported = first_version_is_lower(GRPC_VERSION, GRPC_GENERATED_VERSION)
except ImportError:
    _version_not_supported = True

if _version_not_supported:
    raise RuntimeError(
        f'The grpc package installed is at version {GRPC_VERSION},'
        + f' but the generated code in events_pb2_grpc.py depends on'
        + f' grpcio>={GRPC_GENERATED_VERSION}.'
        + f' Please upgrade your grpc module to grpcio>={GRPC_GENERATED_VERSION}'
        + f' or downgrade your generated code using grpcio-tools<={GRPC_VERSION}.'
    )


class EventLoggerStub(object):
    """Missing associated documentation comment in .proto file."""

    def __init__(self, channel):
        """Constructor.

        Args:
            channel: A grpc.Channel.
        """
        self.LogBidRequest = channel.unary_unary(
                '/rtb.EventLogger/LogBidRequest',
                request_serializer=events__pb2.BidRequestLog.SerializeToString,
                response_deserializer=events__pb2.LogAck.FromString,
                _registered_method=True)
        self.LogBid = channel.unary_unary(
                '/rtb.EventLogger/LogBid',
                request_serializer=events__pb2.BidLog.SerializeToString,
                response_deserializer=events__pb2.LogAck.FromString,
                _registered_method=True)
        self.LogImpression = channel.unary_unary(
                '/rtb.EventLogger/LogImpression',
                request_serializer=events__pb2.ImpressionLog.SerializeToString,
                response_deserializer=events__pb2.LogAck.FromString,
                _registered_method=True)
        self.LogClick = channel.unary_unary(
                '/rtb.EventLogger/LogClick',
                request_serializer=events__pb2.ClickLog.SerializeToString,
                response_deserializer=events__pb2.LogAck.FromString,
                _registered_method=True)


class EventLoggerServicer(object):
    """Missing associated documentation comment in .proto file."""

    def LogBidRequest(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def LogBid(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def LogImpression(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def LogClick(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')


def add_EventLoggerServicer_to_server(servicer, server):
    rpc_method_handlers = {
            'LogBidRequest': grpc.unary_unary_rpc_method_handler(
                    servicer.LogBidRequest,
                    request_deserializer=events__pb2.BidRequestLog.FromString,
                    response_serializer=events__pb2.LogAck.SerializeToString,
            ),
            'LogBid': grpc.unary_unary_rpc_method_handler(
                    servicer.LogBid,
                    request_deserializer=events__pb2.BidLog.FromString,
                    response_serializer=events__pb2.LogAck.SerializeToString,
            ),
            'LogImpression': grpc.unary_unary_rpc_method_handler(
                    servicer.LogImpression,
                    request_deserializer=events__pb2.ImpressionLog.FromString,
                    response_serializer=events__pb2.LogAck.SerializeToString,
            ),
            'LogClick': grpc.unary_unary_rpc_method_handler(
                    servicer.LogClick,
                    request_deserializer=events__pb2.ClickLog.FromString,
                    response_serializer=events__pb2.LogAck.SerializeToString,
            ),
    }
    generic_handler = grpc.method_handlers_generic_handler(
            'rtb.EventLogger', rpc_method_handlers)
    server.add_generic_rpc_handlers((generic_handler,))
    server.add_registered_method_handlers('rtb.EventLogger', rpc_method_handlers)


 # This class is part of an EXPERIMENTAL API.
class EventLogger(object):
    """Missing associated documentation comment in .proto file."""

    @staticmethod
    def LogBidRequest(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(
            request,
            target,
            '/rtb.EventLogger/LogBidRequest',
            events__pb2.BidRequestLog.SerializeToString,
            events__pb2.LogAck.FromString,
            options,
            channel_credentials,
            insecure,
            call_credentials,
            compression,
            wait_for_ready,
            timeout,
            metadata,
            _registered_method=True)

    @staticmethod
    def LogBid(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(
            request,
            target,
            '/rtb.EventLogger/LogBid',
            events__pb2.BidLog.SerializeToString,
            events__pb2.LogAck.FromString,
            options,
            channel_credentials,
            insecure,
            call_credentials,
            compression,
            wait_for_ready,
            timeout,
            metadata,
            _registered_method=True)

    @staticmethod
    def LogImpression(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(
            request,
            target,
            '/rtb.EventLogger/LogImpression',
            events__pb2.ImpressionLog.SerializeToString,
            events__pb2.LogAck.FromString,
            options,
            channel_credentials,
            insecure,
            call_credentials,
            compression,
            wait_for_ready,
            timeout,
            metadata,
            _registered_method=True)

    @staticmethod
    def LogClick(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(
            request,
            target,
            '/rtb.EventLogger/LogClick',
            events__pb2.ClickLog.SerializeToString,
            events__pb2.LogAck.FromString,
            options,
            channel_credentials,
            insecure,
            call_credentials,
            compression,
            wait_for_ready,
            timeout,
            metadata,
            _registered_method=True)
